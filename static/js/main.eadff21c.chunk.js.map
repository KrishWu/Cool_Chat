{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","displayName","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","ReceivedMessage","props","messageClass","className","src","SentMessage","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eadff21c.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyA9N72liY0tkJX2_S6Acc5v7H3YiI0cvu0\",\n  authDomain: \"cool-chat-a6d35.firebaseapp.com\",\n  projectId: \"cool-chat-a6d35\",\n  storageBucket: \"cool-chat-a6d35.appspot.com\",\n  messagingSenderId: \"749064420129\",\n  appId: \"1:749064420129:web:f0cb0bc445b947a2395c60\",\n  measurementId: \"G-6ZBTN5S12R\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Cool Chat!</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n      <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL, displayName } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      displayName\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"CoolChat\" />\n\n      {/* <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button> */}\n\n    </form>\n  </>)\n}\n\nconst ReceivedMessage = (props) => {\n  const { text, uid, photoURL, displayName } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <div className=\"left\">\n        <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      </div>\n      <div className=\"right\">\n        <p className=\"userName\">{displayName}</p>\n        <p className=\"textContent\">{text}</p>\n      </div>\n    </div>\n  </>)\n}\n\nconst SentMessage = (props) => {\n  const { text, uid, photoURL, displayName } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <div className=\"right\">\n        <p className=\"textContent bubbleSent\">{text}</p>\n      </div>\n    </div>\n  </>)\n}\n\nfunction ChatMessage(props) {\n  const {uid} = props.message;\n\n  if (uid === auth.currentUser.uid) {\n    return (\n      <SentMessage message={props.message}/>\n    )\n  }\n  else {\n    return (\n      <ReceivedMessage message={props.message}/>\n    )\n  }\n  \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}